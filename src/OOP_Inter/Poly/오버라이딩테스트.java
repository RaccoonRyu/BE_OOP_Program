package OOP_Inter.Poly;

public class 오버라이딩테스트 {
    public static void main(String[] args) {
        사람 남자 = new 사람("홍길동", 1111);
        남자.정보출력();

        사람 여자 = new 사람("박하은", 2222);
        여자.정보출력();

        교직원 남자교직원 = new 교직원("이순신", 3333, "패스트캠퍼스", 33333);
        // 남자교직원의 정보를 교직원 타입에 맞게 출력하기 위한 오버라이딩!
        남자교직원.정보출력(); // 메서드의 이름은 같지만 사람 타입의 정보출력 메서드가 아닌 교직원 타입의 정보출력 메서드가 호출됨

        사무직원 남자사무직원 = new 사무직원("강감찬", 4444, "패스트캠퍼스", 44444, "경영지원");

        사람[] 사람목록 = {남자, 여자, 남자교직원, 남자사무직원}; // 다형성을 이용하여 업 캐스팅이 가능하므로 남자 교직원 또한 사람 타입 배열의 요소가 될 수 있다.

        for (int i = 0; i < 사람목록.length; i++) {
            사람목록[i].정보출력();
        } // 해당 loop를 수행하면 각 요소가 참조하고 있는 원래 자료형의 메서드를 호출한다.
        // 즉, 각각의 객체가 동일한 이름의 행동을 수행시켜도, 참조하고 있는 실제 객체가 무엇이냐에 따라서 객체가 수행하는 행동의 내용이 변경된다는 뜻이다.
        // 이것이 다형성을 사용하는 이유이다!
    }
}
